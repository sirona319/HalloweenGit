    
           reviveText.DOFade(endValue: 1f, duration: 1f);


    ////////////パーティクル関係
    private void OnParticleSystemStopped()
    {
        print("パーティクルの再生が終了したよ！");
        注意点としては、必ずパーティクルオブジェクト自体にスクリプトがアタッチされている必要があり、
        子階層オブジェクトにアタッチされてもメッセージが送信されません。
    }




    /////////////レンダー関係

    private void OnBecameVisible()
    {
        //GetComponent<NoiseEnable>().enabled = true;

        //idRend = true;
        //Debug.Log("OnBecameVisible");
        //this.GetComponent<Renderer>().material.color = Color.red;
    }

    /// <summary>
    /// Rendererがカメラから見えなくなると呼び出される
    /// </summary>
    private void OnBecameInvisible()
    {
        //GetComponent<NoiseEnable>().enabled = false;

        //Debug.Log("OnBecameInvisible");
        //this.GetComponent<Renderer>().material.color = Color.blue;
    }

    // <summary>
    // カメラに写っている間常に呼ばれる SpriteRendererの関係で不具合が起こる**
    // </summary>
    private void OnWillRenderObject()
    {
        if (!isNoise) return;
        if (noiseTime >= (noiseTiming + randTime) + noiseLength) return;

        noiseTime += Time.deltaTime;


        if (noiseTime > noiseTiming + randTime && GetComponent<NoiseEnable>().enabled == false)
        {
            WorpPositionSelect();

            //ノイズを有効に
            GetComponent<NoiseEnable>().enabled = true;

        }

        if (noiseTime >= (noiseTiming + randTime) + noiseLength && GetComponent<NoiseEnable>().enabled == true)
        {

            //赤かぼちゃのみ
            if (transform.name.Contains("Red"))
            {
                //乱数の再計算　大きめにする？
                //タイミングの加算
                randTime = Random.Range(randTimeMin, randTimeMax + 1);

                noiseTiming += noiseTimingDefaultRed;
            }

            GetComponent<NoiseEnable>().enabled = false;

        }


#if UNITY_EDITOR

        //if (Camera.current.name != "Main Camera" && Camera.current.name != "Preview Camera")
            //Debug.Log("OnWillRenderOject");
        //Camera.current.transform;
#endif
    }







    [SerializeField] Transform actTrans;

    void OnTriggerEnter(Collider other)
    {
        if (other.transform.CompareTag("Player"))
        {
            //if (actTrans.gameObject.activeSelf)
            //{
                Time.timeScale = 0f;
            //}

            ShopUIActive(true);
        }

    }

    void OnTriggerExit(Collider other)
    {
        if (other.transform.CompareTag("Player"))
        {
            Time.timeScale = 1f;

            ShopUIActive(false);
        }

    }

    void ShopUIActive(bool enable)
    {
        CursolManager.I.SetCursol(enable);

        actTrans.gameObject.SetActive(enable);

    }











    //たぶん　ゴミ
    //    void MoveControl()
    //    {
    //        //進行方向計算
    //        //キーボード入力を取得
    //        float v;
    //        float h;
    //#if UNITY_IOS
    ////対象プラットフォームがiOSの時だけコンパイルされる	
    //#elif UNITY_ANDROID
    //        //v = m_variableJoystick.Vertical;
    //        //h = m_variableJoystick.Horizontal;
    //        if (UnityEngine.Device.SystemInfo.operatingSystem.Contains("Android"))
    //        {
    //            //v = m_variableJoystick.Vertical;
    //            //h = m_variableJoystick.Horizontal;

    //            //カメラの正面方向ベクトルからY成分を除き、正規化してキャラが走る方向を取得
    //            Vector3 forward = Vector3.Scale(Camera.main.transform.forward, new Vector3(1, 0, 1)).normalized;
    //            //if(m_isWater)Sword
    //            //   forward = Vector3.Scale(Camera.main.transform.forward, new Vector3(1, 1, 1)).normalized;

    //            Vector3 right = Camera.main.transform.right; //カメラの右方向を取得

    //            //var targetDirection = Vector3.zero;
    //            //カメラの方向を考慮したキャラの進行方向を計算
    //            m_targetDirection = m_variableJoystick.Horizontal * right + m_variableJoystick.Vertical * forward;
    //            //m_input = new Vector3(m_variableJoystick.Horizontal, 0f, m_variableJoystick.Vertical);//対象プラットフォームがAndroidの時だけコンパイルされる
    //        }
    //        SPEED = 4f;
    //#else
    //        v = Input.GetAxisRaw("Vertical");         //InputManagerの↑↓の入力
    //        h = Input.GetAxisRaw("Horizontal");       //InputManagerの←→の入力 

    //        //カメラの正面方向ベクトルからY成分を除き、正規化してキャラが走る方向を取得
    //        Vector3 forward = Vector3.Scale(Camera.main.transform.right, new Vector3(1, 1, 0)).normalized;
    //        //if(m_isWater)Sword
    //        //   forward = Vector3.Scale(Camera.main.transform.forward, new Vector3(1, 1, 1)).normalized;

    //        Vector3 right = Camera.main.transform.right; //カメラの右方向を取得

    //        //var targetDirection = Vector3.zero;
    //        //カメラの方向を考慮したキャラの進行方向を計算
    //        //m_targetDirection = h * right + v * forward;
    //#endif

    //        //移動のベクトルを計算
    //       // m_moveDirection = m_targetDirection * SPEED;

    //        //2D処理
    //        //m_moveDirection.y = m_moveDirection.z;
    //        //m_moveDirection.z = 0;
    //        //
    //       // m_moveDirection.y = 0;
    //        //var resultPos = MoveLimit(m_rb.position + m_moveDirection * Time.deltaTime);

    //        //transform.position = m_rb.position + m_moveDirection * Time.deltaTime;
    //        //m_rb.MovePosition(m_rb.position + m_moveDirection * Time.deltaTime);

    //        //1f前の座標との差を保存
    //        //prePosDiff.Value = m_moveDirection * Time.deltaTime;
    //    }

    //    //Vector3 MoveLimit(Vector3 pos)
    //    //{

    //    //    const float XLIMIT = 8.5f;
    //    //    const float YLIMIT = 4.5f;
    //    //    //Vector3 resultPos = pos;
    //    //    pos.x = Mathf.Clamp(pos.x, -XLIMIT, XLIMIT);
    //    //    pos.y = Mathf.Clamp(pos.y, -YLIMIT, YLIMIT);

    //    //    return pos;
    //    //}

    //    void RotationControl()
    //    {
    //        //Vector3 rotateDirection = m_moveDirection;

    //        ////それなりに移動方向が変化する場合のみ移動方向を変える
    //        //if (rotateDirection.sqrMagnitude > 0.01)
    //        //{
    //        //    //緩やかに移動方向を変える
    //        //    float step = ROTSPEED * Time.deltaTime;
    //        //    Vector3 newDir = Vector3.Slerp(transform.forward, rotateDirection, step);
    //        //    transform.rotation = Quaternion.LookRotation(newDir);
    //        //}
    //    }

    //public void Damage(int damage)
    //{
    //    //回避の実行中なら無効またはダメージ中なら無効　無敵 デバッグ用
    //    if (DEBUGNoDamage) return;
    //    if (isDead) return;
    //    if (isDamage) return;
    //    ////if (m_isDash) return;　ダッシュ時無敵
    //    pDamage.Damage(damage);

    //}